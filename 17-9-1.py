"""
Напишите программу, которой на вход подается последовательность чисел через пробел, а также запрашивается у пользователя любое число.
В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии ввода данных.
Далее программа работает по следующему алгоритму:
1. Преобразование введённой последовательности в список
2. Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
3. Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу.
При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен в этом модуле. Реализуйте его также отдельной функцией.
"""

min_num = 0   # минимальное число
max_num = 157 # максимальное число

# Ввод последовательности чисел
data = input("Введите последовательность чисел от {0} до {1} через пробел:\n".format(min_num, max_num))

# Ввод любого числа
n = int(input("Введите любое число от {0} до {1}: ".format(min_num, max_num))) # сразу преобразуем строку в число

# проверка введенного чис
# ла на принадлежность диапазону
while n < min_num or n > max_num:
    n = int(input("Число {0} вне диапазона. Введите число в диапазоне от {1} до {2}:\n".format(n, min_num, max_num)))


# Преобразование введённой последовательности в список
numbers = [int(i) for i in data.split()]
# print(numbers)
out_num = [] # здесь будут числа вне заданного диапазона

# Проверка последовательности чисел заданному диапазону
for i in numbers.copy(): # без .copy() при удалении некоторые элементы остаются, так как нарушается обход списка элементов при удалении
    if i < min_num or i > max_num:
        numbers.remove(i)
        out_num.append(i)

# Вывод чисел, исключенных из последовательности
if out_num:
    print("Следующие числа не входят в диапазон от {0} до {1} и были исключены из списка: {2}\n".format(min_num, max_num, out_num))
def sort_func(array):
    ''' Функция сортировки выбором из модуля '''
    for i in range(len(array)):  # проходим по всему массиву
        idx_min = i  # сохраняем индекс предположительно минимального элемента
        for j in range(i, len(array)):
            if array[j] < array[idx_min]:
                idx_min = j
        if i != idx_min:  # если индекс не совпадает с минимальным, меняем
            array[i], array[idx_min] = array[idx_min], array[i]

# Сортировка списка по возрастанию элементов в нем
sort_func(numbers)
print("Исходная последовательность чисел: {0}\n".format(numbers))


def binary_search(array, element, left, right):
    ''' Функция бинарного поиска из модуля модифицированная для поиска элементов <  и > или == введенному числу '''
    if left > right:  # если левая граница превысила правую,
        return False  # значит элемент отсутствует

    middle = (right + left) // 2  # находим середину
    if array[middle] == element:  # если элемент в середине, то есть найден, мы приступаем к поиску следующего меньшего элемента
        left_less = middle - 1 # найдем позицию элемента меньше текущего, слева. Элементы слева могут быть равны введенному числу
        while array[left_less] >= array[middle] and left_less >= 0: # двигаемся влево пока следующий элемент станет меньше введенного числа или до нулевой позиции, то есть < нет
            left_less -= 1 # сдвинем позицию на один влево
        return [left_less, middle + 1]  # возвращаем индексы < и > или == элементов
    elif element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
        return binary_search(array, element, left, middle - 1)
    else:  # иначе в правой
        return binary_search(array, element, middle + 1, right)

# поиск от 0 до последнего элемента (len-1, потому что элементы нумеруются с 0)
result = binary_search(numbers, n, 0, len(numbers)-1)

if result == False:
    print("Введенного числа {0} нет в заданной последовательности чисел".format(n))
elif result[0] < 0:
    print("В списке нет числа < заданного. Позиция следующего элемента > или == введенному число: позиция >= {0}".format(result[1]))
else:
    print("Номера позициий элементов < и > или == введенному: позиция < {0}, позиция >= {1}".format(result[0], result[1]))
